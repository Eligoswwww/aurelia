import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio

API_TOKEN = '7856167694:AAGBvMeEIBHFPeCpd6cob05vxaLIUDhay-0'  # <-- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# ======== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite ========
conn = sqlite3.connect('aurelia_bot.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    subscription INTEGER DEFAULT 0 -- 0 - –Ω–µ—Ç, 1 - –µ—Å—Ç—å
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS purchases (
    user_id INTEGER,
    chapter INTEGER,
    PRIMARY KEY (user_id, chapter)
)
''')

conn.commit()

# ======== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========

main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_kb.add(
    KeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É"),
    KeyboardButton("üí≥ –ú–∞–≥–∞–∑–∏–Ω"),
    KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
)
main_menu_kb.add(
    KeyboardButton("üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã"),
    KeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã"),
    KeyboardButton("üí¨ –ß–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º"),
)

# ======== –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏ ========
FREE_CHAPTERS = [1, 2, 3]
TOTAL_CHAPTERS = 10

CHAPTERS_TEXT = {
    1: "–ì–ª–∞–≤–∞ 1. –ü—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ...\n(—Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã...)",
    2: "–ì–ª–∞–≤–∞ 2. –ù–∞—á–∞–ª–æ...\n(—Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã...)",
    3: "–ì–ª–∞–≤–∞ 3. –¢–∞–π–Ω—ã...\n(—Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã...)",
    4: "–ì–ª–∞–≤–∞ 4. –ó–∞–∫–∞—Ç...\n(—Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã...)",
    # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ...
}

# ======== –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ========
def user_has_access(user_id: int, chapter: int) -> bool:
    if chapter in FREE_CHAPTERS:
        return True
    cursor.execute("SELECT subscription FROM users WHERE user_id=?", (user_id,))
    res = cursor.fetchone()
    if res and res[0] == 1:
        return True
    cursor.execute("SELECT 1 FROM purchases WHERE user_id=? AND chapter=?", (user_id, chapter))
    return cursor.fetchone() is not None

# ======== –•–µ–Ω–¥–ª–µ—Ä—ã ========

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AURELIA_Protocol_Bot ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–Ω–∏–≥–∏ 'Freedom's Chaos'.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb
    )

@dp.message_handler(lambda message: message.text == "üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É")
async def read_book_handler(message: types.Message):
    user_id = message.from_user.id
    kb = InlineKeyboardMarkup(row_width=3)
    for chapter in range(1, TOTAL_CHAPTERS + 1):
        if user_has_access(user_id, chapter):
            kb.insert(InlineKeyboardButton(text=f"–ì–ª–∞–≤–∞ {chapter}", callback_data=f"chapter_{chapter}"))
        else:
            kb.insert(InlineKeyboardButton(text=f"–ì–ª–∞–≤–∞ {chapter} üîí", callback_data=f"chapter_locked_{chapter}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –¥–ª—è —á—Ç–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('chapter_'))
async def process_chapter(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data.startswith("chapter_locked_"):
        chapter = int(data.split('_')[-1])
        await callback_query.answer("–≠—Ç–∞ –≥–ª–∞–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ö—É–ø–∏—Ç—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.", show_alert=True)
        return

    chapter = int(data.split('_')[-1])
    if user_has_access(user_id, chapter):
        text = CHAPTERS_TEXT.get(chapter, "–ì–ª–∞–≤–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞.")
        await callback_query.message.edit_text(text, reply_markup=None)
    else:
        await callback_query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥–ª–∞–≤–µ.", show_alert=True)

@dp.message_handler(lambda message: message.text == "üí≥ –ú–∞–≥–∞–∑–∏–Ω")
async def shop_handler(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ö—É–ø–∏—Ç—å –≥–ª–∞–≤—É 4", callback_data="buy_chapter_4"),
        InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
    )
    await message.answer("–ú–∞–≥–∞–∑–∏–Ω ‚Äî –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('buy_chapter_'))
async def buy_chapter_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chapter = int(callback_query.data.split('_')[-1])

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    # –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É:
    cursor.execute("INSERT OR IGNORE INTO purchases (user_id, chapter) VALUES (?, ?)", (user_id, chapter))
    conn.commit()

    await callback_query.answer(f"–ì–ª–∞–≤–∞ {chapter} –∫—É–ø–ª–µ–Ω–∞! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'subscribe')
async def subscribe_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute("UPDATE users SET subscription=1 WHERE user_id=?", (user_id,))
    conn.commit()

    await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –£ —Ç–µ–±—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≥–ª–∞–≤–∞–º.", show_alert=True)

@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="set_schedule"),
        InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="manage_subscription")
    )
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "set_schedule")
async def set_schedule_handler(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="schedule_daily"),
        InlineKeyboardButton("–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="schedule_weekly"),
        InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="schedule_off")
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤—ã—Ö –≥–ª–∞–≤:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('schedule_'))
async def schedule_choice_handler(callback_query: types.CallbackQuery):
    choice = callback_query.data.split('_')[-1]
    user_id = callback_query.from_user.id
    # –ó–¥–µ—Å—å –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç)
    await callback_query.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {choice}", show_alert=True)

@dp.message_handler(lambda message: message.text == "üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã")
async def quiz_handler(message: types.Message):
    question = "–ö—Ç–æ –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∫–Ω–∏–≥–∏?"
    answers = ["–ê—É—Ä–µ–ª–∏—è", "–î–∏—Å—Å–∏–¥–µ–Ω—Ç—ã", "–õ–æ–Ω–¥–æ–Ω", "–ü–∞—Ä–æ–≤—ã–µ –º–∞—à–∏–Ω—ã"]

    kb = InlineKeyboardMarkup(row_width=2)
    for i, ans in enumerate(answers):
        kb.insert(InlineKeyboardButton(ans, callback_data=f"quiz_{i}"))

    await message.answer(question, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('quiz_'))
async def quiz_answer_handler(callback_query: types.CallbackQuery):
    answer_id = int(callback_query.data.split('_')[-1])
    correct = 0  # –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if answer_id == correct:
        await callback_query.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ", show_alert=True)
    else:
        await callback_query.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ.", show_alert=True)

@dp.message_handler(lambda message: message.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referral_handler(message: types.Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/YOUR_BOT_USERNAME?start={user_id}"
    await message.answer(f"–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã:\n{referral_link}")

@dp.message_handler(lambda message: message.text == "üí¨ –ß–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º")
async def chat_with_author_handler(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")

# ======== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========
async def main():
    await dp.start_polling(skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
