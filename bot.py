import os
import logging
import aiohttp  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å Google Drive

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import BotCommand
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import datetime

from db.session import async_session
from db.models import User, UserPurchase, BookPart
from payments.orders import create_order, mark_order_paid, pay_and_unlock_full_book
from keyboards.admin import ADMIN_PANEL
from keyboards.user import USER_PANEL, FULL_ACCESS_PANEL

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", "10000"))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not TOKEN or not WEBHOOK_URL or not ADMIN_ID:
    raise ValueError("BOT_TOKEN, WEBHOOK_URL –∏ ADMIN_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ò–º–ø–æ—Ä—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ ---
from aiogram.filters import Command

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if user_id == ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=ADMIN_PANEL)
        await message.answer(text, reply_markup=USER_PANEL)
    else:
        await message.answer(text, reply_markup=USER_PANEL)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query(F.data == "admin_create_subscription")
async def admin_create_subscription(callback: types.CallbackQuery):
    await callback.answer()
    async with async_session() as session:
        order = await create_order(session, user_id=ADMIN_ID, order_type="subscription", amount=10.0)
    await callback.message.answer(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Å ID {order.id}")

@dp.callback_query(F.data == "admin_create_chapter")
async def admin_create_chapter(callback: types.CallbackQuery):
    await callback.answer()
    part_id = 1
    async with async_session() as session:
        order = await create_order(session, user_id=ADMIN_ID, order_type="chapter", amount=2.0, part_id=part_id)
    await callback.message.answer(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ –≥–ª–∞–≤—ã (ID —á–∞—Å—Ç–∏ –∫–Ω–∏–≥–∏ {part_id}) —Å ID –∑–∞–∫–∞–∑–∞ {order.id}")

@dp.callback_query(F.data == "admin_check_user")
async def admin_check_user(callback: types.CallbackQuery):
    await callback.answer()
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == ADMIN_ID))
        user = result.scalar_one_or_none()
    if user:
        status = "–ø–æ–¥–ø–∏—Å–∞–Ω" if user.subscribed else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        expire = user.subscription_expire.strftime("%Y-%m-%d %H:%M") if user.subscription_expire else "–Ω–µ—Ç —Å—Ä–æ–∫–∞"
        await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}: {status}, –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expire}")
    else:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(F.data == "full_access")
async def user_full_access(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer("–°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑...")

    async with async_session() as session:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = await create_order(
            session,
            user_id=user_id,
            order_type="full_access",
            amount=15.0,
        )
        # –ü–ª–∞—Ç–∏–º (–∑–∞–≥–ª—É—à–∫–∞)
        success = await pay_and_unlock_full_book(session, user_id, order)

    if success:
        await callback.message.answer(
            "‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å –≤—Å—é –∫–Ω–∏–≥—É.",
            reply_markup=FULL_ACCESS_PANEL
        )
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "read_full_book")
async def user_read_full_book(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("üìñ –í–æ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ–π –∫–Ω–∏–≥–∏... (–≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É)")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ---

@dp.callback_query(F.data == "read_chapter_1")
async def user_read_chapter_1(callback: types.CallbackQuery):
    await callback.answer()

    GOOGLE_FILE_ID = "13bEJM5s6kmexUHW_MCMfbm1TnXRIrLip"
    file_url = f"https://drive.google.com/uc?export=download&id={GOOGLE_FILE_ID}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                if resp.status == 200:
                    text = await resp.text()

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                    if len(text) <= 4096:
                        await callback.message.answer(text)
                    else:
                        parts = [text[i:i+4096] for i in range(0, len(text), 4096)]
                        for part in parts:
                            await callback.message.answer(part)
                else:
                    await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–∞.")

@dp.callback_query(F.data == "full_access")
async def user_full_access(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!")

@dp.callback_query(F.data == "open_store")
async def user_open_store(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω: https://example.com/store")

@dp.callback_query(F.data == "subscribe")
async def user_subscribe(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    async with async_session() as session:
        order = await create_order(session, user_id=user_id, order_type="subscription", amount=10.0)
    await callback.message.answer(
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ ‚Ññ{order.id} –Ω–∞ —Å—É–º–º—É {order.amount}$. (–û–ø–ª–∞—Ç–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)"
    )

# --- Startup / Shutdown ---
async def on_startup(app: web.Application):
    print("‚ö° on_startup –≤—ã–∑–≤–∞–Ω")  # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ startup
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown(app: web.Application):
    logger.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
    await bot.delete_webhook()
    await bot.session.close()

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")

if __name__ == "__main__":
    setup_application(app, dp, bot=bot)
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    web.run_app(app, host="0.0.0.0", port=PORT)
